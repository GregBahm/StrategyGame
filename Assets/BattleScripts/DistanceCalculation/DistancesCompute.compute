#pragma kernel BlurHorizontal
#pragma kernel BlurVertical

Buffer<int4> _SourceBuffer;
RWBuffer<int4> _HorizontalBuffer;
RWBuffer<int4> _OutputBuffer;

#define HorizontalResolution 256
#define VerticalResolution 128

uint UvToIndex(uint x, uint y)
{
	return (x * VerticalResolution) + y;
}

[numthreads(128,1,1)] 
void BlurHorizontal (uint3 id : SV_DispatchThreadID)
{
	int4 distances = HorizontalResolution + VerticalResolution;

	for(uint i = 0; i < VerticalResolution; i++) 
	{
		uint bufferIndex = UvToIndex(id.x, i);
		bool4 sourceData = _SourceBuffer[bufferIndex];
		distances *= 1- sourceData;
		distances = distances + 1;
		_HorizontalBuffer[bufferIndex] = distances;
	}

	distances = HorizontalResolution + VerticalResolution;
	for(uint i = 0; i < VerticalResolution; i++) 
	{
		uint reverseI = VerticalResolution - i - 1;
		uint bufferIndex = UvToIndex(id.x, reverseI);
		bool4 sourceData = _SourceBuffer[bufferIndex];
		int4 currentData = _HorizontalBuffer[bufferIndex];
		distances *= 1 - sourceData;
		distances = distances + 1;
		distances = min(distances, currentData);
		_HorizontalBuffer[bufferIndex] = distances;
	}
}
 
[numthreads(128,1,1)]
void BlurVertical (uint3 id : SV_DispatchThreadID)
{
	int4 distances = HorizontalResolution + VerticalResolution;
	for(uint i = 0; i < HorizontalResolution; i++) 
	{
		uint bufferIndex = UvToIndex(i, id.x);
		distances = distances + 1;
		int4 currentData = _HorizontalBuffer[bufferIndex];
		distances = min(distances, currentData);
		_OutputBuffer[bufferIndex] = distances;
	}
	
	distances = HorizontalResolution + VerticalResolution;
	for(uint i = 0; i < HorizontalResolution; i++) 
	{
		uint reverseI = HorizontalResolution - i - 1;
		uint bufferIndex = UvToIndex(reverseI, id.x);
		distances = distances + 1;
		int4 currentData = _OutputBuffer[bufferIndex];
		distances = min(distances, currentData);
		_OutputBuffer[bufferIndex] = distances;
	}
}
