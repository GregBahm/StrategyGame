#pragma kernel CSMain

Texture2D SourceImage;
SamplerState samplerSourceImage;

float _SourceImageWidth;
float _SourceImageHeight;

float _BorderThickness;

RWStructuredBuffer<float> _OutputData;

#define Samples 30

float2 IndexToUvs(uint x, uint y)
{
	float retX = (float)x / _SourceImageWidth;
	float retY = (float)y / _SourceImageHeight;
	return float2(retX, retY);
}

uint GetSample(int x, int y)
{
	float2 uvs = IndexToUvs(x, y);
	float4 currentSample = SourceImage.SampleLevel(samplerSourceImage, uvs, 0);
	uint val = (uint)(currentSample.x * 256);
	return val;
}

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int y = (id.x / _SourceImageWidth) % _SourceImageHeight;
	int x = id.x % _SourceImageWidth;

	uint currentSample = GetSample(x, y);
	float val = 0;

	for (int i = 0; i < Samples; i++)
	{
		for (int j = 0; j < Samples; j++)
		{
			float2 param = float2((float)i / Samples, (float)j / Samples);
			param = param * 2 - 1;
			float2 offset = _BorderThickness * param;

			uint newSample = GetSample(x + offset.x, y + offset.y);
			if (newSample != currentSample)
			{
				float newVal = 1 - length(param);
				val = max(val, newVal);
			}
		}
	}

	_OutputData[id.x] = val;
}
