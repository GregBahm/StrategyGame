// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct PixelNeighbors
{
	int NeighborA;
	int NeighborB;
	int NeighborC;
	int NeighborD;
};

StructuredBuffer<PixelNeighbors> _PixelNeighbors;
StructuredBuffer<float2> _OriginalPosition;

RWStructuredBuffer<float2> _OutputData;

Texture2D NormalTexture;
SamplerState samplerNormalTexture;

float _DistortionStrength;
float _DistortionDrag;
float _OriginPull;

float _SourceImageWidth;
float _SourceImageHeight;

float2 IndexToUvs(uint index)
{
	int y = (index / _SourceImageWidth) % _SourceImageHeight;
	int x = index % _SourceImageWidth;
	float retX = (float)x / _SourceImageWidth;
	float retY = (float)y / _SourceImageHeight;
	return float2(retX, retY);
}
uint UvsToIndex(float2 uvs)
{
	int x = uvs.x * _SourceImageWidth;
	int y = uvs.y * _SourceImageHeight;
	return x + y * _SourceImageWidth;
}

float2 GetNeighborsCenter(PixelNeighbors neighbors)
{
	float2 neighborA = _OutputData[neighbors.NeighborA] + _OriginalPosition[neighbors.NeighborA];
	float2 neighborB = _OutputData[neighbors.NeighborB] + _OriginalPosition[neighbors.NeighborB];
	float2 neighborC = _OutputData[neighbors.NeighborC] + _OriginalPosition[neighbors.NeighborC];
	float2 neighborD = _OutputData[neighbors.NeighborD] + _OriginalPosition[neighbors.NeighborD];
	float2 ret = (neighborA + neighborB + neighborC + neighborD) / 4;
	return ret;
}

[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	PixelNeighbors neighbors = _PixelNeighbors[id.x];
	if(neighbors.NeighborA != 0) // Lock borders
	{
		float2 originalPos = _OriginalPosition[id.x];
		float2 currentOffset = _OutputData[id.x];
		float2 currentPos = originalPos + currentOffset;
		float2 neighborsCenter = GetNeighborsCenter(neighbors);

		float2 offset = NormalTexture.SampleLevel(samplerNormalTexture, currentPos, 0).xy;
		offset = offset * 2 - 1;
		offset = normalize(offset);
		offset *= _DistortionStrength;

		float2 newPos = currentPos + offset;
		newPos = lerp(newPos, neighborsCenter, _DistortionDrag);
		newPos = lerp(newPos, originalPos, _OriginPull);
		_OutputData[id.x] = newPos - originalPos;
	}
}
